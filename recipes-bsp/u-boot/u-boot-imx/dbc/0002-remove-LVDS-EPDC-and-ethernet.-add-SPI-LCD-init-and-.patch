From 363517e9f313c25d1c182f34678af1624094c394 Mon Sep 17 00:00:00 2001
From: Danylo Storozhev <daniel@storozhev.net>
Date: Tue, 7 Jan 2025 10:23:42 +0000
Subject: [PATCH 2/3] remove LVDS, EPDC and ethernet. add SPI LCD init and def

---
 board/freescale/mx6sabresd/mx6sabresd.c | 1022 ++++++-----------------
 1 file changed, 243 insertions(+), 779 deletions(-)

diff --git a/board/freescale/mx6sabresd/mx6sabresd.c b/board/freescale/mx6sabresd/mx6sabresd.c
index 49870103b8a..4518fcdcc00 100644
--- a/board/freescale/mx6sabresd/mx6sabresd.c
+++ b/board/freescale/mx6sabresd/mx6sabresd.c
@@ -92,42 +92,6 @@ static iomux_v3_cfg_t const uart1_pads[] = {
 	MX6_PAD_CSI0_DAT11__UART1_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
 };
 
-static iomux_v3_cfg_t const enet_pads[] = {
-	MX6_PAD_ENET_MDIO__ENET_MDIO		| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_ENET_MDC__ENET_MDC		| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TXC__RGMII_TXC	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TD0__RGMII_TD0	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TD1__RGMII_TD1	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TD2__RGMII_TD2	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TD3__RGMII_TD3	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RXC__RGMII_RXC	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RD0__RGMII_RD0	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RD1__RGMII_RD1	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RD2__RGMII_RD2	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RD3__RGMII_RD3	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	| MUX_PAD_CTRL(ENET_PAD_CTRL),
-	/* AR8031 PHY Reset */
-	MX6_PAD_ENET_CRS_DV__GPIO1_IO25		| MUX_PAD_CTRL(NO_PAD_CTRL),
-};
-
-static void fec_phy_reset(void)
-{
-	/* Reset AR8031 PHY */
-	gpio_request(IMX_GPIO_NR(1, 25), "ENET PHY Reset");
-	gpio_direction_output(IMX_GPIO_NR(1, 25) , 0);
-	mdelay(10);
-	gpio_set_value(IMX_GPIO_NR(1, 25), 1);
-	udelay(100);
-}
-
-static void setup_iomux_enet(void)
-{
-	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
-	fec_phy_reset();
-}
-
 static iomux_v3_cfg_t const usdhc2_pads[] = {
 	MX6_PAD_SD2_CLK__SD2_CLK	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
 	MX6_PAD_SD2_CMD__SD2_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
@@ -149,11 +113,6 @@ static iomux_v3_cfg_t const usdhc3_pads[] = {
 	MX6_PAD_SD3_DAT1__SD3_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
 	MX6_PAD_SD3_DAT2__SD3_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
 	MX6_PAD_SD3_DAT3__SD3_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD3_DAT4__SD3_DATA4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD3_DAT5__SD3_DATA5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD3_DAT6__SD3_DATA6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_SD3_DAT7__SD3_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
-	MX6_PAD_NANDF_D0__GPIO2_IO00    | MUX_PAD_CTRL(NO_PAD_CTRL), /* CD */
 };
 
 static iomux_v3_cfg_t const usdhc4_pads[] = {
@@ -169,32 +128,248 @@ static iomux_v3_cfg_t const usdhc4_pads[] = {
 	MX6_PAD_SD4_DAT7__SD4_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
 };
 
-#ifdef CONFIG_MXC_SPI
+
 static iomux_v3_cfg_t const ecspi1_pads[] = {
 	MX6_PAD_KEY_COL0__ECSPI1_SCLK | MUX_PAD_CTRL(SPI_PAD_CTRL),
 	MX6_PAD_KEY_COL1__ECSPI1_MISO | MUX_PAD_CTRL(SPI_PAD_CTRL),
 	MX6_PAD_KEY_ROW0__ECSPI1_MOSI | MUX_PAD_CTRL(SPI_PAD_CTRL),
-	MX6_PAD_KEY_ROW1__GPIO4_IO09 | MUX_PAD_CTRL(NO_PAD_CTRL),
+	MX6_PAD_KEY_ROW1__ECSPI1_SS0 | MUX_PAD_CTRL(NO_PAD_CTRL),
 };
 
-static void setup_spi(void)
+// customized duplicate from uboot/common/cmd_spi.c
+
+#include <common.h>
+#include <command.h>
+#include <dm.h>
+#include <errno.h>
+#include <spi.h>
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+#ifndef MAX_SPI_BYTES
+#   define MAX_SPI_BYTES 32	/* Maximum number of bytes we can handle */
+#endif
+
+#ifndef CONFIG_DEFAULT_SPI_BUS
+#   define CONFIG_DEFAULT_SPI_BUS	0
+#endif
+#ifndef CONFIG_DEFAULT_SPI_MODE
+#   define CONFIG_DEFAULT_SPI_MODE	SPI_MODE_0
+#endif
+
+/*
+ * Values from last command.
+ */
+static unsigned int	bus;
+static unsigned int	cs;
+static unsigned int	mode;
+static int   		bitlen;
+static uchar 		dout[MAX_SPI_BYTES];
+static uchar 		din[MAX_SPI_BYTES];
+
+static int do_spi_xfer_lcd(int bus, int cs)
 {
-	imx_iomux_v3_setup_multiple_pads(ecspi1_pads, ARRAY_SIZE(ecspi1_pads));
-	gpio_request(IMX_GPIO_NR(4, 9), "ECSPI1 CS");
+	struct spi_slave *slave;
+	int ret = 0;
+
+#ifdef CONFIG_DM_SPI
+	char name[30], *str;
+	struct udevice *dev;
+
+	snprintf(name, sizeof(name), "generic_%d:%d", bus, cs);
+	str = strdup(name);
+	if (!str)
+		return -ENOMEM;
+	ret = spi_get_bus_and_cs(bus, cs, 1000000, mode, "spi_generic_drv",
+				 str, &dev, &slave);
+	if (ret)
+		return ret;
+#else
+	slave = spi_setup_slave(bus, cs, 1000000, mode);
+	if (!slave) {
+		printf("Invalid device %d:%d\n", bus, cs);
+		return -EINVAL;
+	}
+#endif
+
+	ret = spi_claim_bus(slave);
+	if (ret)
+		goto done;
+	ret = spi_xfer(slave, bitlen, dout, din,
+		       SPI_XFER_BEGIN | SPI_XFER_END);
+#ifndef CONFIG_DM_SPI
+	/* We don't get an error code in this case */
+	if (ret)
+		ret = -EIO;
+#endif
+	if (ret) {
+		printf("Error %d during SPI transaction\n", ret);
+	} else {
+		int j;
+
+		/*for (j = 0; j < ((bitlen + 7) / 8); j++)
+			printf("%02X", din[j]);
+		printf("\n");*/
+	}
+done:
+	spi_release_bus(slave);
+#ifndef CONFIG_DM_SPI
+	spi_free_slave(slave);
+#endif
+
+	return ret;
 }
 
-int board_spi_cs_gpio(unsigned bus, unsigned cs)
+/*
+ * SPI read/write
+ *
+ * Syntax:
+ *   spi {dev} {num_bits} {dout}
+ *     {dev} is the device number for controlling chip select (see TBD)
+ *     {num_bits} is the number of bits to send & receive (base 10)
+ *     {dout} is a hexadecimal string of data to send
+ * The command prints out the hexadecimal string received via SPI.
+ */
+
+int do_spi_lcd (int flag, int argc, char * const argv[])
 {
-	return (bus == 0 && cs == 0) ? (IMX_GPIO_NR(4, 9)) : -1;
+	char  *cp = 0;
+	uchar tmp;
+	int   j;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		if (argc >= 2) {
+			mode = CONFIG_DEFAULT_SPI_MODE;
+			bus = simple_strtoul(argv[1], &cp, 10);
+			if (*cp == ':') {
+				cs = simple_strtoul(cp+1, &cp, 10);
+			} else {
+				cs = bus;
+				bus = CONFIG_DEFAULT_SPI_BUS;
+			}
+			if (*cp == '.')
+				mode = simple_strtoul(cp+1, NULL, 10);
+		}
+		if (argc >= 3){
+			bitlen = simple_strtoul(argv[2], NULL, 10);}
+		if (argc >= 4) {
+			cp = argv[3];
+			for(j = 0; *cp; j++, cp++) {
+				tmp = *cp - '0';
+				if(tmp > 9)
+					tmp -= ('A' - '0') - 10;
+				if(tmp > 15)
+					tmp -= ('a' - 'A');
+				if(tmp > 15) {
+					printf("Hex conversion error on %c\n", *cp);
+					return 1;
+				}
+				if((j % 2) == 0)
+					dout[j / 2] = (tmp << 4);
+				else
+					dout[j / 2] |= tmp;
+			}
+		}
+	}
+
+	if ((bitlen < 0) || (bitlen >  (MAX_SPI_BYTES * 8))) {
+		printf("Invalid bitlen %d\n", bitlen);
+		return 1;
+	}
+
+	if (do_spi_xfer_lcd(bus, cs))
+		return 1;
+
+	return 0;
+}
+
+struct cspi_regs *ecspi1 = (struct cspi_regs *)ECSPI1_BASE_ADDR;
+
+void write_command(char x) {
+    while (readl(&ecspi1->stat) & (1<<2))
+        udelay(10);
+    writel(x,&ecspi1->txdata);
+}
+
+void write_data(char x) {
+    while (readl(&ecspi1->stat) & (1<<2))
+        udelay(10);
+    writel((1<<8)|x,&ecspi1->txdata);
+}
+
+void setup_lcd_spi(void) {
+    struct mxc_ccm_reg *ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+    int reg;
+    reg=readl(&ecspi1->ctrl);
+    writel(reg&0xFFFFFFFE,&ecspi1->ctrl);
+    reg=readl(&ccm->CCGR1);
+    writel(reg|(3<<6),&ccm->CCGR1);
+    reg=8<<20 | 0<<18 | 0<<16 | 2<<12 | 1<<8 | 1<<4 | 1<<3 | 0<<2 | 0<<1 | 1<<0;
+    writel(reg,&ecspi1->ctrl);
+    imx_iomux_v3_setup_multiple_pads(ecspi1_pads, ARRAY_SIZE(ecspi1_pads));
+}
+
+void lcd_init_spi(void) {
+    // LCD initialization commands structure
+    struct lcd_cmd {
+        const char *addr;
+        const char *data;
+    };
+    
+    // Command sequence for LCD initialization
+    static const struct lcd_cmd init_seq[] = {
+        {"20FF", "0000"}, {"20FF", "4080"},
+        {"20FF", "0001"}, {"20FF", "4019"},
+        {"20FF", "0002"}, {"20FF", "4001"},
+        {"20FF", "0080"}, {"20FF", "4080"},
+        {"20FF", "0081"}, {"20FF", "4019"},
+        {"20B2", "0090"}, {"20B2", "4000"},
+        {"20B2", "0091"}, {"20B2", "4006"},
+        {"20B2", "0092"}, {"20B2", "4000"},
+        {"20B2", "0093"}, {"20B2", "4013"},
+        {"20B2", "0094"}, {"20B2", "4000"},
+        {"20B2", "0095"}, {"20B2", "402E"},
+        {"20B2", "0096"}, {"20B2", "4000"},
+        {"20B2", "0097"}, {"20B2", "402E"},
+        {"20FF", "0080"}, {"20FF", "40FF"},
+        {"20FF", "0081"}, {"20FF", "40FF"},
+        {"20FF", "0000"}, {"20FF", "40FF"},
+        {"20FF", "0001"}, {"20FF", "40FF"},
+        {"20FF", "0002"}, {"20FF", "40FF"},
+        {"2011", "0000"}, {"2011", "4000"},
+        {"2029", "0000"}, {"2029", "4000"}
+    };
+
+    char *argv[4] = {"0", "0:0.0", "16", NULL};
+    const int argc = sizeof(argv)/sizeof(argv[0]);
+    
+    for (size_t i = 0; i < sizeof(init_seq)/sizeof(init_seq[0]); i++) {
+        argv[3] = (char*)init_seq[i].addr;
+        do_spi_lcd(0, argc, argv);
+        argv[3] = (char*)init_seq[i].data;
+        do_spi_lcd(0, argc, argv);
+        
+        // Special delay case
+        if (i == sizeof(init_seq)/sizeof(init_seq[0]) - 4) {
+            udelay(1000);
+        }
+    }
 }
-#endif
 
 static iomux_v3_cfg_t const rgb_pads[] = {
 	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15 | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02 | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03 | MUX_PAD_CTRL(NO_PAD_CTRL),
-	MX6_PAD_DI0_PIN4__IPU1_DI0_PIN04 | MUX_PAD_CTRL(NO_PAD_CTRL),
+	MX6_PAD_DI0_PIN4__GPIO4_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DATA00 | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DATA01 | MUX_PAD_CTRL(NO_PAD_CTRL),
 	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DATA02 | MUX_PAD_CTRL(NO_PAD_CTRL),
@@ -229,17 +404,21 @@ static void enable_backlight(void)
 {
 	imx_iomux_v3_setup_multiple_pads(bl_pads, ARRAY_SIZE(bl_pads));
 	gpio_request(DISP0_PWR_EN, "Display Power Enable");
-	gpio_direction_output(DISP0_PWR_EN, 1);
+	gpio_direction_output(DISP0_PWR_EN, 0);
 }
 
-static void enable_rgb(struct display_info_t const *dev)
+static void enable_rgb(void)
 {
-	imx_iomux_v3_setup_multiple_pads(rgb_pads, ARRAY_SIZE(rgb_pads));
-	enable_backlight();
-}
+	setup_lcd_spi();
+	gpio_request(IMX_GPIO_NR(4, 20), "lcd reset");
+	gpio_direction_output(IMX_GPIO_NR(4, 20) , 1);
+	udelay(1000);
+	gpio_direction_output(IMX_GPIO_NR(4, 20) , 0);
+	udelay(1000);
+	gpio_direction_output(IMX_GPIO_NR(4, 20) , 1);
+	udelay(1000);
+	lcd_init_spi();
 
-static void enable_lvds(struct display_info_t const *dev)
-{
 	enable_backlight();
 }
 
@@ -258,20 +437,6 @@ static struct i2c_pads_info i2c_pad_info1 = {
 };
 #endif
 
-#ifdef CONFIG_PCIE_IMX
-iomux_v3_cfg_t const pcie_pads[] = {
-	MX6_PAD_EIM_D19__GPIO3_IO19 | MUX_PAD_CTRL(NO_PAD_CTRL),	/* POWER */
-	MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(NO_PAD_CTRL),	/* RESET */
-};
-
-static void setup_pcie(void)
-{
-	imx_iomux_v3_setup_multiple_pads(pcie_pads, ARRAY_SIZE(pcie_pads));
-	gpio_request(CONFIG_PCIE_IMX_POWER_GPIO, "PCIE Power Enable");
-	gpio_request(CONFIG_PCIE_IMX_PERST_GPIO, "PCIE Reset");
-}
-#endif
-
 iomux_v3_cfg_t const di0_pads[] = {
 	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,	/* DISP0_CLK */
 	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02,		/* DISP0_HSYNC */
@@ -283,54 +448,6 @@ static void setup_iomux_uart(void)
 	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
 }
 
-#if defined(CONFIG_MX6DL) && defined(CONFIG_MXC_EPDC)
-static iomux_v3_cfg_t const epdc_enable_pads[] = {
-	MX6_PAD_EIM_A16__EPDC_DATA00	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA10__EPDC_DATA01	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA12__EPDC_DATA02	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA11__EPDC_DATA03	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_LBA__EPDC_DATA04	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_EB2__EPDC_DATA05	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_CS0__EPDC_DATA06	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_RW__EPDC_DATA07	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_A21__EPDC_GDCLK	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_A22__EPDC_GDSP	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_A23__EPDC_GDOE	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_A24__EPDC_GDRL	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_D31__EPDC_SDCLK_P	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_D27__EPDC_SDOE	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA1__EPDC_SDLE	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_EB1__EPDC_SDSHR	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA2__EPDC_BDR0	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA4__EPDC_SDCE0	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA5__EPDC_SDCE1	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-	MX6_PAD_EIM_DA6__EPDC_SDCE2	| MUX_PAD_CTRL(EPDC_PAD_CTRL),
-};
-
-static iomux_v3_cfg_t const epdc_disable_pads[] = {
-	MX6_PAD_EIM_A16__GPIO2_IO22,
-	MX6_PAD_EIM_DA10__GPIO3_IO10,
-	MX6_PAD_EIM_DA12__GPIO3_IO12,
-	MX6_PAD_EIM_DA11__GPIO3_IO11,
-	MX6_PAD_EIM_LBA__GPIO2_IO27,
-	MX6_PAD_EIM_EB2__GPIO2_IO30,
-	MX6_PAD_EIM_CS0__GPIO2_IO23,
-	MX6_PAD_EIM_RW__GPIO2_IO26,
-	MX6_PAD_EIM_A21__GPIO2_IO17,
-	MX6_PAD_EIM_A22__GPIO2_IO16,
-	MX6_PAD_EIM_A23__GPIO6_IO06,
-	MX6_PAD_EIM_A24__GPIO5_IO04,
-	MX6_PAD_EIM_D31__GPIO3_IO31,
-	MX6_PAD_EIM_D27__GPIO3_IO27,
-	MX6_PAD_EIM_DA1__GPIO3_IO01,
-	MX6_PAD_EIM_EB1__GPIO2_IO29,
-	MX6_PAD_EIM_DA2__GPIO3_IO02,
-	MX6_PAD_EIM_DA4__GPIO3_IO04,
-	MX6_PAD_EIM_DA5__GPIO3_IO05,
-	MX6_PAD_EIM_DA6__GPIO3_IO06,
-};
-#endif
-
 #ifdef CONFIG_FSL_ESDHC
 struct fsl_esdhc_cfg usdhc_cfg[3] = {
 	{USDHC2_BASE_ADDR},
@@ -358,10 +475,10 @@ int board_mmc_getcd(struct mmc *mmc)
 
 	switch (cfg->esdhc_base) {
 	case USDHC2_BASE_ADDR:
-		ret = !gpio_get_value(USDHC2_CD_GPIO);
+		ret = 1;
 		break;
 	case USDHC3_BASE_ADDR:
-		ret = !gpio_get_value(USDHC3_CD_GPIO);
+		ret = 1;
 		break;
 	case USDHC4_BASE_ADDR:
 		ret = 1; /* eMMC/uSDHC4 is always present */
@@ -396,8 +513,6 @@ int board_mmc_init(bd_t *bis)
 		case 1:
 			imx_iomux_v3_setup_multiple_pads(
 				usdhc3_pads, ARRAY_SIZE(usdhc3_pads));
-			gpio_request(USDHC3_CD_GPIO, "USDHC3 CD");
-			gpio_direction_input(USDHC3_CD_GPIO);
 			usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK);
 			break;
 		case 2:
@@ -459,297 +574,29 @@ int board_mmc_init(bd_t *bis)
 }
 #endif
 
-static int ar8031_phy_fixup(struct phy_device *phydev)
-{
-	unsigned short val;
-
-	/* To enable AR8031 ouput a 125MHz clk from CLK_25M */
-	if (!is_mx6dqp()) {
-		phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x7);
-		phy_write(phydev, MDIO_DEVAD_NONE, 0xe, 0x8016);
-		phy_write(phydev, MDIO_DEVAD_NONE, 0xd, 0x4007);
-
-		val = phy_read(phydev, MDIO_DEVAD_NONE, 0xe);
-		val &= 0xffe3;
-		val |= 0x18;
-		phy_write(phydev, MDIO_DEVAD_NONE, 0xe, val);
-	}
-
-	/* set the IO voltage to 1.8v */
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x1f);
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, 0x8);
-
-	/* introduce tx clock delay */
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x5);
-	val = phy_read(phydev, MDIO_DEVAD_NONE, 0x1e);
-	val |= 0x0100;
-	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, val);
-
-	return 0;
-}
-
-int board_phy_config(struct phy_device *phydev)
-{
-	ar8031_phy_fixup(phydev);
-
-	if (phydev->drv->config)
-		phydev->drv->config(phydev);
-
-	return 0;
-}
-
-#if defined(CONFIG_MX6DL) && defined(CONFIG_MXC_EPDC)
-vidinfo_t panel_info = {
-	.vl_refresh = 85,
-	.vl_col = 800,
-	.vl_row = 600,
-	.vl_pixclock = 26666667,
-	.vl_left_margin = 8,
-	.vl_right_margin = 100,
-	.vl_upper_margin = 4,
-	.vl_lower_margin = 8,
-	.vl_hsync = 4,
-	.vl_vsync = 1,
-	.vl_sync = 0,
-	.vl_mode = 0,
-	.vl_flag = 0,
-	.vl_bpix = 3,
-	.cmap = 0,
-};
-
-struct epdc_timing_params panel_timings = {
-	.vscan_holdoff = 4,
-	.sdoed_width = 10,
-	.sdoed_delay = 20,
-	.sdoez_width = 10,
-	.sdoez_delay = 20,
-	.gdclk_hp_offs = 419,
-	.gdsp_offs = 20,
-	.gdoe_offs = 0,
-	.gdclk_offs = 5,
-	.num_ce = 1,
-};
-
-static void setup_epdc_power(void)
-{
-	/* Setup epdc voltage */
-
-	/* EIM_A17 - GPIO2[21] for PWR_GOOD status */
-	imx_iomux_v3_setup_pad(MX6_PAD_EIM_A17__GPIO2_IO21 |
-				MUX_PAD_CTRL(EPDC_PAD_CTRL));
-	/* Set as input */
-	gpio_request(IMX_GPIO_NR(2, 21), "EPDC PWRSTAT");
-	gpio_direction_input(IMX_GPIO_NR(2, 21));
-
-	/* EIM_D17 - GPIO3[17] for VCOM control */
-	imx_iomux_v3_setup_pad(MX6_PAD_EIM_D17__GPIO3_IO17 |
-				MUX_PAD_CTRL(EPDC_PAD_CTRL));
-
-	/* Set as output */
-	gpio_request(IMX_GPIO_NR(3, 17), "EPDC VCOM0");
-	gpio_direction_output(IMX_GPIO_NR(3, 17), 1);
-
-	/* EIM_D20 - GPIO3[20] for EPD PMIC WAKEUP */
-	imx_iomux_v3_setup_pad(MX6_PAD_EIM_D20__GPIO3_IO20 |
-				MUX_PAD_CTRL(EPDC_PAD_CTRL));
-	/* Set as output */
-	gpio_request(IMX_GPIO_NR(3, 20), "EPDC PWR WAKEUP");
-	gpio_direction_output(IMX_GPIO_NR(3, 20), 1);
-
-	/* EIM_A18 - GPIO2[20] for EPD PWR CTL0 */
-	imx_iomux_v3_setup_pad(MX6_PAD_EIM_A18__GPIO2_IO20 |
-				MUX_PAD_CTRL(EPDC_PAD_CTRL));
-	/* Set as output */
-	gpio_request(IMX_GPIO_NR(2, 20), "EPDC PWR CTRL0");
-	gpio_direction_output(IMX_GPIO_NR(2, 20), 1);
-}
-
-static void epdc_enable_pins(void)
-{
-	/* epdc iomux settings */
-	imx_iomux_v3_setup_multiple_pads(epdc_enable_pads,
-				ARRAY_SIZE(epdc_enable_pads));
-}
-
-static void epdc_disable_pins(void)
-{
-	/* Configure MUX settings for EPDC pins to GPIO */
-	imx_iomux_v3_setup_multiple_pads(epdc_disable_pads,
-				ARRAY_SIZE(epdc_disable_pads));
-}
-
-static void setup_epdc(void)
-{
-	unsigned int reg;
-	struct mxc_ccm_reg *ccm_regs = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
-
-	/*** Set pixel clock rates for EPDC ***/
-
-	/* EPDC AXI clk (IPU2_CLK) from PFD_400M, set to 396/2 = 198MHz */
-	reg = readl(&ccm_regs->cscdr3);
-	reg &= ~0x7C000;
-	reg |= (1 << 16) | (1 << 14);
-	writel(reg, &ccm_regs->cscdr3);
-
-	/* EPDC AXI clk enable */
-	reg = readl(&ccm_regs->CCGR3);
-	reg |= 0x00C0;
-	writel(reg, &ccm_regs->CCGR3);
-
-	/* EPDC PIX clk (IPU2_DI1_CLK) from PLL5, set to 650/4/6 = ~27MHz */
-	reg = readl(&ccm_regs->cscdr2);
-	reg &= ~0x3FE00;
-	reg |= (2 << 15) | (5 << 12);
-	writel(reg, &ccm_regs->cscdr2);
-
-	/* PLL5 enable (defaults to 650) */
-	reg = readl(&ccm_regs->analog_pll_video);
-	reg &= ~((1 << 16) | (1 << 12));
-	reg |= (1 << 13);
-	writel(reg, &ccm_regs->analog_pll_video);
-
-	/* EPDC PIX clk enable */
-	reg = readl(&ccm_regs->CCGR3);
-	reg |= 0x0C00;
-	writel(reg, &ccm_regs->CCGR3);
-
-	panel_info.epdc_data.wv_modes.mode_init = 0;
-	panel_info.epdc_data.wv_modes.mode_du = 1;
-	panel_info.epdc_data.wv_modes.mode_gc4 = 3;
-	panel_info.epdc_data.wv_modes.mode_gc8 = 2;
-	panel_info.epdc_data.wv_modes.mode_gc16 = 2;
-	panel_info.epdc_data.wv_modes.mode_gc32 = 2;
-
-	panel_info.epdc_data.epdc_timings = panel_timings;
-
-	setup_epdc_power();
-}
-
-void epdc_power_on(void)
-{
-	unsigned int reg;
-	struct gpio_regs *gpio_regs = (struct gpio_regs *)GPIO2_BASE_ADDR;
-
-	/* Set EPD_PWR_CTL0 to high - enable EINK_VDD (3.15) */
-	gpio_set_value(IMX_GPIO_NR(2, 20), 1);
-	udelay(1000);
-
-	/* Enable epdc signal pin */
-	epdc_enable_pins();
-
-	/* Set PMIC Wakeup to high - enable Display power */
-	gpio_set_value(IMX_GPIO_NR(3, 20), 1);
-
-	/* Wait for PWRGOOD == 1 */
-	while (1) {
-		reg = readl(&gpio_regs->gpio_psr);
-		if (!(reg & (1 << 21)))
-			break;
-
-		udelay(100);
-	}
-
-	/* Enable VCOM */
-	gpio_set_value(IMX_GPIO_NR(3, 17), 1);
-
-	udelay(500);
-}
-
-void epdc_power_off(void)
-{
-	/* Set PMIC Wakeup to low - disable Display power */
-	gpio_set_value(IMX_GPIO_NR(3, 20), 0);
-
-	/* Disable VCOM */
-	gpio_set_value(IMX_GPIO_NR(3, 17), 0);
-
-	epdc_disable_pins();
-
-	/* Set EPD_PWR_CTL0 to low - disable EINK_VDD (3.15) */
-	gpio_set_value(IMX_GPIO_NR(2, 20), 0);
-}
-#endif
 
 #if defined(CONFIG_VIDEO_IPUV3)
-static void disable_lvds(struct display_info_t const *dev)
-{
-	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
-
-	int reg = readl(&iomux->gpr[2]);
-
-	reg &= ~(IOMUXC_GPR2_LVDS_CH0_MODE_MASK |
-		 IOMUXC_GPR2_LVDS_CH1_MODE_MASK);
-
-	writel(reg, &iomux->gpr[2]);
-}
-
-static void do_enable_hdmi(struct display_info_t const *dev)
-{
-	disable_lvds(dev);
-	imx_enable_hdmi_phy();
-}
 
 struct display_info_t const displays[] = {{
-	.bus	= -1,
-	.addr	= 0,
-	.pixfmt	= IPU_PIX_FMT_RGB666,
-	.detect	= NULL,
-	.enable	= enable_lvds,
-	.mode	= {
-		.name           = "Hannstar-XGA",
-		.refresh        = 60,
-		.xres           = 1024,
-		.yres           = 768,
-		.pixclock       = 15384,
-		.left_margin    = 160,
-		.right_margin   = 24,
-		.upper_margin   = 29,
-		.lower_margin   = 3,
-		.hsync_len      = 136,
-		.vsync_len      = 6,
-		.sync           = FB_SYNC_EXT,
-		.vmode          = FB_VMODE_NONINTERLACED
-} }, {
-	.bus	= -1,
-	.addr	= 0,
-	.pixfmt	= IPU_PIX_FMT_RGB24,
-	.detect	= NULL,
-	.enable	= do_enable_hdmi,
-	.mode	= {
-		.name           = "HDMI",
-		.refresh        = 60,
-		.xres           = 640,
-		.yres           = 480,
-		.pixclock       = 39721,
-		.left_margin    = 48,
-		.right_margin   = 16,
-		.upper_margin   = 33,
-		.lower_margin   = 10,
-		.hsync_len      = 96,
-		.vsync_len      = 2,
-		.sync           = 0,
-		.vmode          = FB_VMODE_NONINTERLACED
-} }, {
 	.bus	= 0,
 	.addr	= 0,
 	.pixfmt	= IPU_PIX_FMT_RGB24,
 	.detect	= NULL,
 	.enable	= enable_rgb,
 	.mode	= {
-		.name           = "SEIKO-WVGA",
-		.refresh        = 60,
-		.xres           = 800,
+		.name		= "AUO",
+		.xres           = 480,
 		.yres           = 480,
-		.pixclock       = 29850,
+		.pixclock       = 40000,
 		.left_margin    = 89,
 		.right_margin   = 164,
 		.upper_margin   = 23,
 		.lower_margin   = 10,
 		.hsync_len      = 10,
 		.vsync_len      = 10,
-		.sync           = 0,
 		.vmode          = FB_VMODE_NONINTERLACED
 } } };
+
 size_t display_count = ARRAY_SIZE(displays);
 
 static void setup_display(void)
@@ -817,28 +664,6 @@ int overwrite_console(void)
 	return 1;
 }
 
-static void setup_fec(void)
-{
-	if (is_mx6dqp()) {
-		int ret;
-
-		/* select ENET MAC0 TX clock from PLL */
-		imx_iomux_set_gpr_register(5, 9, 1, 1);
-		ret = enable_fec_anatop_clock(0, ENET_125MHZ);
-		if (ret)
-		    printf("Error fec anatop clock settings!\n");
-	}
-
-	fec_phy_reset();
-}
-
-int board_eth_init(bd_t *bis)
-{
-	setup_iomux_enet();
-
-	return cpu_eth_init(bis);
-}
-
 #ifdef CONFIG_USB_EHCI_MX6
 #ifndef CONFIG_DM_USB
 
@@ -912,7 +737,6 @@ int board_early_init_f(void)
 #if defined(CONFIG_VIDEO_IPUV3)
 	setup_display();
 #endif
-
 	return 0;
 }
 
@@ -921,10 +745,6 @@ int board_init(void)
 	/* address of boot parameters */
 	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
 
-#ifdef CONFIG_MXC_SPI
-	setup_spi();
-#endif
-
 #ifdef CONFIG_SYS_I2C
 	setup_i2c(1, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_info1);
 #endif
@@ -940,22 +760,7 @@ int board_init(void)
 	imx_iomux_set_gpr_register(1, 13, 1, 0);
 #endif
 #endif
-
-#ifdef CONFIG_PCIE_IMX
-	setup_pcie();
-#endif
-
-#if defined(CONFIG_MX6DL) && defined(CONFIG_MXC_EPDC)
-	setup_epdc();
-#endif
-
-#ifdef CONFIG_CMD_SATA
-	setup_sata();
-#endif
-
-#ifdef CONFIG_FEC_MXC
-	setup_fec();
-#endif
+        enable_rgb();
 
 	return 0;
 }
@@ -963,85 +768,6 @@ int board_init(void)
 #ifdef CONFIG_POWER
 int power_init_board(void)
 {
-	struct pmic *pfuze;
-	unsigned int reg;
-	int ret;
-
-	pfuze = pfuze_common_init(I2C_PMIC);
-	if (!pfuze)
-		return -ENODEV;
-
-	if (is_mx6dqp())
-		ret = pfuze_mode_init(pfuze, APS_APS);
-	else
-		ret = pfuze_mode_init(pfuze, APS_PFM);
-
-	if (ret < 0)
-		return ret;
-	/* VGEN3 and VGEN5 corrected on i.mx6qp board */
-	if (!is_mx6dqp()) {
-		/* Increase VGEN3 from 2.5 to 2.8V */
-		pmic_reg_read(pfuze, PFUZE100_VGEN3VOL, &reg);
-		reg &= ~LDO_VOL_MASK;
-		reg |= LDOB_2_80V;
-		pmic_reg_write(pfuze, PFUZE100_VGEN3VOL, reg);
-
-		/* Increase VGEN5 from 2.8 to 3V */
-		pmic_reg_read(pfuze, PFUZE100_VGEN5VOL, &reg);
-		reg &= ~LDO_VOL_MASK;
-		reg |= LDOB_3_00V;
-		pmic_reg_write(pfuze, PFUZE100_VGEN5VOL, reg);
-	}
-
-	if (is_mx6dqp()) {
-		/* set SW1C staby volatage 1.075V*/
-		pmic_reg_read(pfuze, PFUZE100_SW1CSTBY, &reg);
-		reg &= ~0x3f;
-		reg |= 0x1f;
-		pmic_reg_write(pfuze, PFUZE100_SW1CSTBY, reg);
-
-		/* set SW1C/VDDSOC step ramp up time to from 16us to 4us/25mV */
-		pmic_reg_read(pfuze, PFUZE100_SW1CCONF, &reg);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(pfuze, PFUZE100_SW1CCONF, reg);
-
-		/* set SW2/VDDARM staby volatage 0.975V*/
-		pmic_reg_read(pfuze, PFUZE100_SW2STBY, &reg);
-		reg &= ~0x3f;
-		reg |= 0x17;
-		pmic_reg_write(pfuze, PFUZE100_SW2STBY, reg);
-
-		/* set SW2/VDDARM step ramp up time to from 16us to 4us/25mV */
-		pmic_reg_read(pfuze, PFUZE100_SW2CONF, &reg);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(pfuze, PFUZE100_SW2CONF, reg);
-	} else {
-		/* set SW1AB staby volatage 0.975V*/
-		pmic_reg_read(pfuze, PFUZE100_SW1ABSTBY, &reg);
-		reg &= ~0x3f;
-		reg |= 0x1b;
-		pmic_reg_write(pfuze, PFUZE100_SW1ABSTBY, reg);
-
-		/* set SW1AB/VDDARM step ramp up time from 16us to 4us/25mV */
-		pmic_reg_read(pfuze, PFUZE100_SW1ABCONF, &reg);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(pfuze, PFUZE100_SW1ABCONF, reg);
-
-		/* set SW1C staby volatage 0.975V*/
-		pmic_reg_read(pfuze, PFUZE100_SW1CSTBY, &reg);
-		reg &= ~0x3f;
-		reg |= 0x1b;
-		pmic_reg_write(pfuze, PFUZE100_SW1CSTBY, reg);
-
-		/* set SW1C/VDDSOC step ramp up time to from 16us to 4us/25mV */
-		pmic_reg_read(pfuze, PFUZE100_SW1CCONF, &reg);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(pfuze, PFUZE100_SW1CCONF, reg);
-	}
 
 	return 0;
 }
@@ -1049,86 +775,6 @@ int power_init_board(void)
 #elif defined(CONFIG_DM_PMIC_PFUZE100)
 int power_init_board(void)
 {
-	struct udevice *dev;
-	unsigned int reg;
-	int ret;
-
-	dev = pfuze_common_init();
-	if (!dev)
-		return -ENODEV;
-
-	if (is_mx6dqp())
-		ret = pfuze_mode_init(dev, APS_APS);
-	else
-		ret = pfuze_mode_init(dev, APS_PFM);
-	if (ret < 0)
-		return ret;
-
-	/* VGEN3 and VGEN5 corrected on i.mx6qp board */
-	if (!is_mx6dqp()) {
-		/* Increase VGEN3 from 2.5 to 2.8V */
-		reg = pmic_reg_read(dev, PFUZE100_VGEN3VOL);
-		reg &= ~LDO_VOL_MASK;
-		reg |= LDOB_2_80V;
-		pmic_reg_write(dev, PFUZE100_VGEN3VOL, reg);
-
-		/* Increase VGEN5 from 2.8 to 3V */
-		reg = pmic_reg_read(dev, PFUZE100_VGEN5VOL);
-		reg &= ~LDO_VOL_MASK;
-		reg |= LDOB_3_00V;
-		pmic_reg_write(dev, PFUZE100_VGEN5VOL, reg);
-	}
-
-	if (is_mx6dqp()) {
-		/* set SW1C staby volatage 1.075V*/
-		reg = pmic_reg_read(dev, PFUZE100_SW1CSTBY);
-		reg &= ~0x3f;
-		reg |= 0x1f;
-		pmic_reg_write(dev, PFUZE100_SW1CSTBY, reg);
-
-		/* set SW1C/VDDSOC step ramp up time to from 16us to 4us/25mV */
-		reg = pmic_reg_read(dev, PFUZE100_SW1CCONF);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(dev, PFUZE100_SW1CCONF, reg);
-
-		/* set SW2/VDDARM staby volatage 0.975V*/
-		reg = pmic_reg_read(dev, PFUZE100_SW2STBY);
-		reg &= ~0x3f;
-		reg |= 0x17;
-		pmic_reg_write(dev, PFUZE100_SW2STBY, reg);
-
-		/* set SW2/VDDARM step ramp up time to from 16us to 4us/25mV */
-		reg = pmic_reg_read(dev, PFUZE100_SW2CONF);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(dev, PFUZE100_SW2CONF, reg);
-	} else {
-		/* set SW1AB staby volatage 0.975V*/
-		reg = pmic_reg_read(dev, PFUZE100_SW1ABSTBY);
-		reg &= ~0x3f;
-		reg |= 0x1b;
-		pmic_reg_write(dev, PFUZE100_SW1ABSTBY, reg);
-
-		/* set SW1AB/VDDARM step ramp up time from 16us to 4us/25mV */
-		reg = pmic_reg_read(dev, PFUZE100_SW1ABCONF);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(dev, PFUZE100_SW1ABCONF, reg);
-
-		/* set SW1C staby volatage 0.975V*/
-		reg = pmic_reg_read(dev, PFUZE100_SW1CSTBY);
-		reg &= ~0x3f;
-		reg |= 0x1b;
-		pmic_reg_write(dev, PFUZE100_SW1CSTBY, reg);
-
-		/* set SW1C/VDDSOC step ramp up time to from 16us to 4us/25mV */
-		reg = pmic_reg_read(dev, PFUZE100_SW1CCONF);
-		reg &= ~0xc0;
-		reg |= 0x40;
-		pmic_reg_write(dev, PFUZE100_SW1CCONF, reg);
-	}
-
 	return 0;
 }
 #endif
@@ -1137,189 +783,12 @@ int power_init_board(void)
 #ifdef CONFIG_POWER
 void ldo_mode_set(int ldo_bypass)
 {
-	unsigned int value;
-	int is_400M;
-	unsigned char vddarm;
-	struct pmic *p = pmic_get("PFUZE100");
-
-	if (!p) {
-		printf("No PMIC found!\n");
-		return;
-	}
-
-	/* increase VDDARM/VDDSOC to support 1.2G chip */
-	if (check_1_2G()) {
-		ldo_bypass = 0;	/* ldo_enable on 1.2G chip */
-		printf("1.2G chip, increase VDDARM_IN/VDDSOC_IN\n");
-		if (is_mx6dqp()) {
-			/* increase VDDARM to 1.425V */
-			pmic_reg_read(p, PFUZE100_SW2VOL, &value);
-			value &= ~0x3f;
-			value |= 0x29;
-			pmic_reg_write(p, PFUZE100_SW2VOL, value);
-		} else {
-			/* increase VDDARM to 1.425V */
-			pmic_reg_read(p, PFUZE100_SW1ABVOL, &value);
-			value &= ~0x3f;
-			value |= 0x2d;
-			pmic_reg_write(p, PFUZE100_SW1ABVOL, value);
-		}
-		/* increase VDDSOC to 1.425V */
-		pmic_reg_read(p, PFUZE100_SW1CVOL, &value);
-		value &= ~0x3f;
-		value |= 0x2d;
-		pmic_reg_write(p, PFUZE100_SW1CVOL, value);
-	}
-	/* switch to ldo_bypass mode , boot on 800Mhz */
-	if (ldo_bypass) {
-		prep_anatop_bypass();
-		if (is_mx6dqp()) {
-			/* decrease VDDARM for 400Mhz DQP:1.1V*/
-			pmic_reg_read(p, PFUZE100_SW2VOL, &value);
-			value &= ~0x3f;
-			value |= 0x1c;
-			pmic_reg_write(p, PFUZE100_SW2VOL, value);
-		} else {
-			/* decrease VDDARM for 400Mhz DQ:1.1V, DL:1.275V */
-			pmic_reg_read(p, PFUZE100_SW1ABVOL, &value);
-			value &= ~0x3f;
-			if (is_mx6dl())
-				value |= 0x27;
-			else
-				value |= 0x20;
-
-			pmic_reg_write(p, PFUZE100_SW1ABVOL, value);
-		}
-		/* increase VDDSOC to 1.3V */
-		pmic_reg_read(p, PFUZE100_SW1CVOL, &value);
-		value &= ~0x3f;
-		value |= 0x28;
-		pmic_reg_write(p, PFUZE100_SW1CVOL, value);
-
-		/*
-		 * MX6Q/DQP:
-		 * VDDARM:1.15V@800M; VDDSOC:1.175V@800M
-		 * VDDARM:0.975V@400M; VDDSOC:1.175V@400M
-		 * MX6DL:
-		 * VDDARM:1.175V@800M; VDDSOC:1.175V@800M
-		 * VDDARM:1.15V@400M; VDDSOC:1.175V@400M
-		 */
-		is_400M = set_anatop_bypass(2);
-		if (is_mx6dqp()) {
-			pmic_reg_read(p, PFUZE100_SW2VOL, &value);
-			value &= ~0x3f;
-			if (is_400M)
-				value |= 0x17;
-			else
-				value |= 0x1e;
-			pmic_reg_write(p, PFUZE100_SW2VOL, value);
-		}
 
-		if (is_400M) {
-			if (is_mx6dl())
-				vddarm = 0x22;
-			else
-				vddarm = 0x1b;
-		} else {
-			if (is_mx6dl())
-				vddarm = 0x23;
-			else
-				vddarm = 0x22;
-		}
-		pmic_reg_read(p, PFUZE100_SW1ABVOL, &value);
-		value &= ~0x3f;
-		value |= vddarm;
-		pmic_reg_write(p, PFUZE100_SW1ABVOL, value);
-
-		/* decrease VDDSOC to 1.175V */
-		pmic_reg_read(p, PFUZE100_SW1CVOL, &value);
-		value &= ~0x3f;
-		value |= 0x23;
-		pmic_reg_write(p, PFUZE100_SW1CVOL, value);
-
-		finish_anatop_bypass();
-		printf("switch to ldo_bypass mode!\n");
-	}
 }
 #elif defined(CONFIG_DM_PMIC_PFUZE100)
 void ldo_mode_set(int ldo_bypass)
 {
-	int is_400M;
-	unsigned char vddarm;
-	struct udevice *dev;
-	int ret;
-
-	ret = pmic_get("pfuze100", &dev);
-	if (ret == -ENODEV) {
-		printf("No PMIC found!\n");
-		return;
-	}
-
-	/* increase VDDARM/VDDSOC to support 1.2G chip */
-	if (check_1_2G()) {
-		ldo_bypass = 0; /* ldo_enable on 1.2G chip */
-		printf("1.2G chip, increase VDDARM_IN/VDDSOC_IN\n");
-		if (is_mx6dqp()) {
-			/* increase VDDARM to 1.425V */
-			pmic_clrsetbits(dev, PFUZE100_SW2VOL, 0x3f, 0x29);
-		} else {
-			/* increase VDDARM to 1.425V */
-			pmic_clrsetbits(dev, PFUZE100_SW1ABVOL, 0x3f, 0x2d);
-		}
-		/* increase VDDSOC to 1.425V */
-		pmic_clrsetbits(dev, PFUZE100_SW1CVOL, 0x3f, 0x2d);
-	}
-	/* switch to ldo_bypass mode , boot on 800Mhz */
-	if (ldo_bypass) {
-		prep_anatop_bypass();
-		if (is_mx6dqp()) {
-			/* decrease VDDARM for 400Mhz DQP:1.1V*/
-			pmic_clrsetbits(dev, PFUZE100_SW2VOL, 0x3f, 0x1c);
-		} else {
-			/* decrease VDDARM for 400Mhz DQ:1.1V, DL:1.275V */
-			if (is_mx6dl())
-				pmic_clrsetbits(dev, PFUZE100_SW1ABVOL, 0x3f, 0x27);
-			else
-				pmic_clrsetbits(dev, PFUZE100_SW1ABVOL, 0x3f, 0x20);
-		}
-		/* increase VDDSOC to 1.3V */
-		pmic_clrsetbits(dev, PFUZE100_SW1CVOL, 0x3f, 0x28);
-
-		/*
-		 * MX6Q/DQP:
-		 * VDDARM:1.15V@800M; VDDSOC:1.175V@800M
-		 * VDDARM:0.975V@400M; VDDSOC:1.175V@400M
-		 * MX6DL:
-		 * VDDARM:1.175V@800M; VDDSOC:1.175V@800M
-		 * VDDARM:1.15V@400M; VDDSOC:1.175V@400M
-		 */
-		is_400M = set_anatop_bypass(2);
-		if (is_mx6dqp()) {
-			if (is_400M)
-				pmic_clrsetbits(dev, PFUZE100_SW2VOL, 0x3f, 0x17);
-			else
-				pmic_clrsetbits(dev, PFUZE100_SW2VOL, 0x3f, 0x1e);
-		}
-
-		if (is_400M) {
-			if (is_mx6dl())
-				vddarm = 0x22;
-			else
-				vddarm = 0x1b;
-		} else {
-			if (is_mx6dl())
-				vddarm = 0x23;
-			else
-				vddarm = 0x22;
-		}
-		pmic_clrsetbits(dev, PFUZE100_SW1ABVOL, 0x3f, vddarm);
-
-		/* decrease VDDSOC to 1.175V */
-		pmic_clrsetbits(dev, PFUZE100_SW1CVOL, 0x3f, 0x23);
 
-		finish_anatop_bypass();
-		printf("switch to ldo_bypass mode!\n");
-	}
 }
 #endif
 #endif
@@ -1341,11 +810,6 @@ int board_late_init(void)
 	add_board_boot_modes(board_boot_modes);
 #endif
 
-	setenv("tee", "no");
-#ifdef CONFIG_IMX_OPTEE
-	setenv("tee", "yes");
-#endif
-
 #ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
 	setenv("board_name", "SABRESD");
 
-- 
2.34.1

